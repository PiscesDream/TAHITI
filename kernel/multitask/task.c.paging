#include <paging.h>
#include <stdint.h>
#include <task.h>
#include <string.h>
#include <utils/system.h>
#include <heap.h>
#include <debug.h>

volatile task_t *cur_task;
volatile task_t *task_queue;

extern page_directory_t *kernel_dir;
extern page_directory_t *current_dir;
extern void alloc_frame(page_t*,int,int);
extern uint32_t initial_esp;
extern uint32_t read_eip();

uint32_t pid_counter = 0;

#include<screen.h>
void move_stack(void *new_stack, uint32_t size) {
    uint32_t i;
//    uint32_t thres = 3;
    for (i = (uint32_t)new_stack; i > (uint32_t)new_stack-size; i-=0x1000) {
        page_t *addr = get_page(i, 1, current_dir);
        alloc_frame(addr, 0, 1);
//        scr_puthex((uint32_t)addr);
//        scr_putch('\n');
//        thres--;
//        if (!thres) __debug_smile();
    }

    // flush
    uint32_t pd_addr;
    asm volatile("mov %%cr3, %0" : "=r" (pd_addr));
    asm volatile("mov %0, %%cr3" : : "r" (pd_addr));

    // Old ESP and EBP, read from registers.
    uint32_t old_offset_ptr, old_base_ptr; 
    asm volatile("mov %%ebp, %0; mov %%esp, %1" : "=r" (old_base_ptr), "=r"(old_offset_ptr));

    if (initial_esp == 0) initial_esp = 0x10000;
    uint32_t offset = (uint32_t)new_stack - initial_esp;
    uint32_t new_offset_ptr = old_offset_ptr + offset;
    uint32_t new_base_ptr = old_base_ptr + offset;

    memcpy((void *)new_offset_ptr, (void*)old_offset_ptr, initial_esp-old_offset_ptr);

    for(i = (uint32_t)new_stack; i > (uint32_t)new_stack-size; i -= 4) {
        uint32_t tmp = * (uint32_t*)i;
        // If the value of tmp is inside the range of the old stack, assume it is a base pointer
        // and remap it. It's unstable and cannot ensure the correctness 
        if ((old_offset_ptr < tmp) && (tmp < initial_esp)) {
            tmp = tmp + (uint32_t)new_stack - initial_esp;
            uint32_t *tmp2 = (uint32_t*)i;
            *tmp2 = tmp;
        }
    }

    asm volatile("mov %0, %%esp;"
                 "mov %1, %%ebp;"::"r"(new_offset_ptr), "r"(new_base_ptr));
}

void init_multitask() {
    cli();

    move_stack((void *)0x50000, 0x2000);
    cur_task = task_queue = (task_t *)_malloc(sizeof(task_t), 0, 0);
    cur_task->id = ++pid_counter;
    cur_task->esp = cur_task->ebp = 0;
    cur_task->eip = 0;
    cur_task->page_dir = current_dir;

    sti();
}

int fork() {
    cli();

    task_t *parent_task = (task_t *)cur_task;
    page_directory_t *dir = clone_directory(current_dir);
    task_t *new_task = (task_t*)_malloc(sizeof(task_t), 0, 0);
    new_task->id = ++pid_counter;
    new_task->esp = new_task->ebp = 0;
    new_task->eip = 0;
    new_task->page_dir = dir;
    new_task->next = 0;

    task_t *tmp = (task_t*)task_queue;
    while (tmp->next) tmp = tmp->next;
    tmp->next = new_task;

    uint32_t eip = read_eip();
    if (cur_task == parent_task) {
        uint32_t esp, ebp;
        asm volatile("mov %%ebp, %0; mov %%esp, %1" : "=r" (ebp), "=r"(esp));
        new_task->esp = esp;
        new_task->ebp = ebp;
        new_task->eip = eip;
        sti();
        return new_task->id; // for parent
    }
    else 
        return 0;// for child
}

volatile task_t* get_next_task(volatile task_t * cur_task) {
    // can schedule here
    if (cur_task->next)
        return cur_task->next;
    else 
        return task_queue;
}

void task_switch() {
    if (!cur_task) return;

    uint32_t eip = read_eip();
    if (eip == DUMMY_EIP) return;
    
    uint32_t esp, ebp;
    asm volatile("mov %%ebp, %0; mov %%esp, %1" : "=r" (ebp), "=r"(esp));
//  scr_put_task(cur_task);
    cur_task->eip = eip;
    cur_task->ebp = ebp;
    cur_task->esp = esp;

    cur_task = get_next_task(cur_task);
//  scr_put_task(cur_task);
    esp = cur_task->esp;
    ebp = cur_task->ebp;

//  scr_puts("Current page dir: ");
//  scr_puthex((uint32_t) current_dir);
//  scr_puts(" \n");
    scr_puts("Switch to :\n");
    scr_put_task(cur_task);
    asm volatile("cli;" 
                 "mov %0, %%ecx;"
                 "mov %1, %%esp;" 
                 "mov %2, %%ebp;" 
                 "mov %3, %%cr3;" 
                 "mov %4, %%eax;"
                 "sti;" 
                 "jmp *%%ecx"
                  ::"r"(eip), "r"(esp), "r"(ebp), "r"(current_dir->phy_addr), "i"(DUMMY_EIP));
}
