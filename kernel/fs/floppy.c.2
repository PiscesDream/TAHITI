#include <fs/floppy.h>
#include <utils/port.h>

// from http://www.brokenthorn.com/Resources/OSDev20.html


void flpydsk_disable_controller () {
	flpydsk_write_dor (0);
}

void flpydsk_enable_controller () {
	flpydsk_write_dor ( FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA);
}

const int FLOPPY_IRQ = 6;
 
//! set when IRQ fires
static volatile uint8_t _FloppyDiskIRQ = 0;
 
void _cdecl i86_flpy_irq () {
 
	_asm add esp, 12
	_asm pushad
	_asm cli
 
	//! irq fired
	_FloppyDiskIRQ = 1;
 
	//! tell hal we are done
	interruptdone( FLOPPY_IRQ );
 
	_asm sti
	_asm popad
	_asm iretd
}

//! wait for irq to fire
inline void flpydsk_wait_irq () {
	//! wait for irq to fire
	while ( _FloppyDiskIRQ == 0)
		;
	_FloppyDiskIRQ = 0;
}

//! initialize DMA to use phys addr 1k-64k
void flpydsk_initialize_dma () {
	outportb (0x0a,0x06);	//mask dma channel 2
	outportb (0xd8,0xff);	//reset master flip-flop
	outportb (0x04, 0);     //address=0x1000 
	outportb (0x04, 0x10);
	outportb (0xd8, 0xff);  //reset master flip-flop
	outportb (0x05, 0xff);  //count to 0x23ff (number of bytes in a 3.5" floppy disk track)
	outportb (0x05, 0x23);
	outportb (0x80, 0);     //external page register = 0
	outportb (0x0a, 0x02);  //unmask dma channel 2
}
 
//! prepare the DMA for read transfer
void flpydsk_dma_read () {
	outportb (0x0a, 0x06); //mask dma channel 2
	outportb (0x0b, 0x56); //single transfer, address increment, autoinit, read, channel 2
	outportb (0x0a, 0x02); //unmask dma channel 2
}
 
//! prepare the DMA for write transfer
void flpydsk_dma_write () {
	outportb (0x0a, 0x06); //mask dma channel 2
	outportb (0x0b, 0x5a); //single transfer, address increment, autoinit, write, channel 2
	outportb (0x0a, 0x02); //unmask dma channel 2
}

enum FLPYDSK_IO {
	FLPYDSK_DOR		=	0x3f2,
	FLPYDSK_MSR		=	0x3f4,
	FLPYDSK_FIFO		=	0x3f5,	//data register
	FLPYDSK_CTRL		=	0x3f7
};

enum FLPYDSK_DOR_MASK {
 
	FLPYDSK_DOR_MASK_DRIVE0			=	0,	//00000000	= here for completeness sake
	FLPYDSK_DOR_MASK_DRIVE1			=	1,	//00000001
	FLPYDSK_DOR_MASK_DRIVE2			=	2,	//00000010
	FLPYDSK_DOR_MASK_DRIVE3			=	3,	//00000011
	FLPYDSK_DOR_MASK_RESET			=	4,	//00000100
	FLPYDSK_DOR_MASK_DMA			=	8,	//00001000
	FLPYDSK_DOR_MASK_DRIVE0_MOTOR		=	16,	//00010000
	FLPYDSK_DOR_MASK_DRIVE1_MOTOR		=	32,	//00100000
	FLPYDSK_DOR_MASK_DRIVE2_MOTOR		=	64,	//01000000
	FLPYDSK_DOR_MASK_DRIVE3_MOTOR		=	128	//10000000
};

void flpydsk_write_dor (uint8_t val) { //! write the digital output register
	outportb (FLPYDSK_DOR, val);
}

enum FLPYDSK_MSR_MASK {
	FLPYDSK_MSR_MASK_DRIVE1_POS_MODE	=	1,	//00000001
	FLPYDSK_MSR_MASK_DRIVE2_POS_MODE	=	2,	//00000010
	FLPYDSK_MSR_MASK_DRIVE3_POS_MODE	=	4,	//00000100
	FLPYDSK_MSR_MASK_DRIVE4_POS_MODE	=	8,	//00001000
	FLPYDSK_MSR_MASK_BUSY			=	16,	//00010000
	FLPYDSK_MSR_MASK_DMA			=	32,	//00100000
	FLPYDSK_MSR_MASK_DATAIO			=	64, 	//01000000
	FLPYDSK_MSR_MASK_DATAREG		=	128	//10000000
};

//! just return main status register
uint8_t flpydsk_read_status () { 
	return inportb (FLPYDSK_MSR);
}

//! wait until data register is ready. We send commands to the data register
void flpydsk_send_command (uint8_t cmd) {
	for (int i = 0; i < 500; i++ )
		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )
			outportb (FLPYDSK_FIFO, cmd);
}
 
//! same as above function but returns data register for reading
uint8_t flpydsk_read_data () {
	for (int i = 0; i < 500; i++ )
		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )
			return inportb (FLPYDSK_FIFO);
}

//! write the configuation control
void flpydsk_write_ccr (uint8_t val) {
	outportb (FLPYDSK_CTRL, val);
}

enum FLPYDSK_CMD {
	FDC_CMD_READ_TRACK	=	2,
	FDC_CMD_SPECIFY		=	3,
	FDC_CMD_CHECK_STAT	=	4,
	FDC_CMD_WRITE_SECT	=	5,
	FDC_CMD_READ_SECT	=	6,
	FDC_CMD_CALIBRATE	=	7,
	FDC_CMD_CHECK_INT	=	8,
	FDC_CMD_WRITE_DEL_S	=	9,
	FDC_CMD_READ_ID_S	=	0xa,
	FDC_CMD_READ_DEL_S	=	0xc,
	FDC_CMD_FORMAT_TRACK	=	0xd,
	FDC_CMD_SEEK		=	0xf
};

enum FLPYDSK_CMD_EXT {
	FDC_CMD_EXT_SKIP	=	0x20,	//00100000
	FDC_CMD_EXT_DENSITY	=	0x40,	//01000000
	FDC_CMD_EXT_MULTITRACK	=	0x80	//10000000
};

enum FLPYDSK_GAP3_LENGTH {
	FLPYDSK_GAP3_LENGTH_STD = 42,
	FLPYDSK_GAP3_LENGTH_5_14= 32,
	FLPYDSK_GAP3_LENGTH_3_5= 27
};

enum FLPYDSK_SECTOR_DTL {
	FLPYDSK_SECTOR_DTL_128	=	0,
	FLPYDSK_SECTOR_DTL_256	=	1,
	FLPYDSK_SECTOR_DTL_512	=	2,
	FLPYDSK_SECTOR_DTL_1024	=	4
};

void flpydsk_check_int (uint32_t* st0, uint32_t* cyl) {
	flpydsk_send_command (FDC_CMD_CHECK_INT);
 
	*st0 = flpydsk_read_data ();
	*cyl = flpydsk_read_data ();
} 

void flpydsk_read_sector_imp (uint8_t head, uint8_t track, uint8_t sector) {
	uint32_t st0, cyl;
 
	//! set the DMA for read transfer
	flpydsk_dma_read ();
 
	//! read in a sector
	flpydsk_send_command (
		FDC_CMD_READ_SECT | FDC_CMD_EXT_MULTITRACK |
		FDC_CMD_EXT_SKIP | FDC_CMD_EXT_DENSITY);
	flpydsk_send_command ( head << 2 | _CurrentDrive );
	flpydsk_send_command ( track);
	flpydsk_send_command ( head);
	flpydsk_send_command ( sector);
	flpydsk_send_command ( FLPYDSK_SECTOR_DTL_512 );
	flpydsk_send_command (
		( ( sector + 1 ) >= FLPY_SECTORS_PER_TRACK )
			? FLPY_SECTORS_PER_TRACK : sector + 1 );
	flpydsk_send_command ( FLPYDSK_GAP3_LENGTH_3_5 );
	flpydsk_send_command ( 0xff );
 
	//! wait for irq
	flpydsk_wait_irq ();
 
	//! read status info
	for (int j=0; j<7; j++)
		flpydsk_read_data ();
 
	//! let FDC know we handled interrupt
	flpydsk_check_int (&st0, &cyl);
}

void flpydsk_drive_data (uint32_t stepr, uint32_t loadt, uint32_t unloadt, int dma ) {
	uint32_t data = 0;
 
	flpydsk_send_command (FDC_CMD_SPECIFY);
 
	data = ( (stepr & 0xf) << 4) | (unloadt & 0xf);
	flpydsk_send_command (data);
 
	data = (loadt) << 1 | (dma) ? 1 : 0;
	flpydsk_send_command (data);
}



int flpydsk_calibrate (uint32_t drive) {
	uint32_t st0, cyl;
 
	if (drive >= 4)
		return -2;
 
	//! turn on the motor
	flpydsk_control_motor (1);
 
	for (int i = 0; i < 10; i++) {
 
		//! send command
		flpydsk_send_command ( FDC_CMD_CALIBRATE );
		flpydsk_send_command ( drive );
		flpydsk_wait_irq ();
		flpydsk_check_int ( &st0, &cyl);
 
		//! did we fine cylinder 0? if so, we are done
		if (!cyl) {
			flpydsk_control_motor (0);
			return 0;
		}
	}
 
	flpydsk_control_motor (1);
	return -1;
}


int flpydsk_seek ( uint32_t cyl, uint32_t head ) {
	uint32_t st0, cyl0;
 
	if (_CurrentDrive >= 4)
		return -1;
 
	for (int i = 0; i < 10; i++ ) {
 
		//! send the command
		flpydsk_send_command (FDC_CMD_SEEK);
		flpydsk_send_command ( (head) << 2 | _CurrentDrive);
		flpydsk_send_command (cyl);
 
		//! wait for the results phase IRQ
		flpydsk_wait_irq ();
		flpydsk_check_int (&st0,&cyl0);
 
		//! found the cylinder?
		if ( cyl0 == cyl)
			return 0;
	}
 
	return -1;
}


void flpydsk_disable_controller () {
	flpydsk_write_dor (0);
}

void flpydsk_enable_controller () {
	flpydsk_write_dor ( FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA);
}

void flpydsk_reset () {
	uint32_t st0, cyl;
 
	//! reset the controller
	flpydsk_disable_controller ();
	flpydsk_enable_controller ();
	flpydsk_wait_irq ();
 
	//! send CHECK_INT/SENSE INTERRUPT command to all drives
	for (int i=0; i<4; i++)
		flpydsk_check_int (&st0,&cyl);
 
	//! transfer speed 500kb/s
	flpydsk_write_ccr (0);
 
	//! pass mechanical drive info. steprate=3ms, unload time=240ms, load time=16ms
	flpydsk_drive_data (3,16,240,1);
 
	//! calibrate the disk
	flpydsk_calibrate ( _CurrentDrive );
}

void flpydsk_lba_to_chs (int lba,int *head,int *track,int *sector) {
   *head = ( lba % ( FLPY_SECTORS_PER_TRACK * 2 ) ) / ( FLPY_SECTORS_PER_TRACK );
   *track = lba / ( FLPY_SECTORS_PER_TRACK * 2 );
   *sector = lba % FLPY_SECTORS_PER_TRACK + 1;
}

uint8_t* flpydsk_read_sector (int sectorLBA) {
	if (_CurrentDrive >= 4)
		return 0;
 
	//! convert LBA sector to CHS
	int head=0, track=0, sector=1;
	flpydsk_lba_to_chs (sectorLBA, &head, &track, &sector);
 
	//! turn motor on and seek to track
	flpydsk_control_motor (1);
	if (flpydsk_seek (track, head) != 0)
		return 0;
 
	//! read sector and turn motor off
	flpydsk_read_sector_imp (head, track, sector);
	flpydsk_control_motor (0);
 
	//! warning: this is a bit hackish
	//return (uint8_t*) DMA_BUFFER;
}



#include <screen.h>

void cmd_read_sect () {
	uint32_t sectornum = 0;
	char sectornumbuf [4];
	uint8_t* sector = 0;
 
	printf ("\n\rPlease type in the sector number [0 is default] >");
	sectornum = 1; //atoi (sectornumbuf);
 
	printf ("\n\rSector %i contents:\n\n\r", sectornum);
 
	//! read sector from disk
	sector = flpydsk_read_sector ( sectornum );
 
	//! display sector
	if (sector!=0) {
 
		int i = 0;
		for ( int c = 0; c < 4; c++ ) {
 
			for (int j = 0; j < 128; j++)
				printf ("0x%x ", sector[ i + j ]);
			i += 128;
 
			printf("\n\rPress any key to continue\n\r");
		}
	}
	else
		printf ("\n\r*** Error reading sector from disk");
 
	printf ("\n\rDone.");
}


